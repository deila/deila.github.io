// Generated by CoffeeScript 1.6.2
(function() {
  var MenuItem, ViewModel,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  window.root_routes = ["", "#", "#!", "#!/"];

  MenuItem = (function() {
    function MenuItem(title, route) {
      var _this = this;

      this.title = title;
      this.route = route;
      this.title = window.model.u(this.title);
      this.active = ko.computed(function() {
        var hash, _ref;

        hash = window.model.hash();
        if (hash === _this.route) {
          return "active";
        }
        if (__indexOf.call(root_routes, hash) >= 0 && (_ref = _this.route, __indexOf.call(root_routes, _ref) >= 0)) {
          return "active";
        }
        return "";
      });
    }

    return MenuItem;

  })();

  ViewModel = (function() {
    function ViewModel() {
      var _this = this;

      window.model = this;
      this.hash = ko.observable(window.location.hash);
      $(window).on("hashchange", function() {
        return _this.hash(window.location.hash);
      });
      this.languages = languages;
      this.language = ko.observable("ru");
      this.u = function(to_translate) {
        return ko.computed(function() {
          if (!translations[_this.language()][to_translate]) {
            console.log("[warning] no translation: " + to_translate);
            return to_translate;
          }
          return translations[_this.language()][to_translate];
        });
      };
      this.navigation = ko.observable({
        menu: ko.observableArray([new MenuItem("home", "#!/"), new MenuItem("top", "#!/top"), new MenuItem("authors", "#!/authors")]),
        right_menu: ko.observableArray([new MenuItem("search", "#!/search")])
      });
      this.title = this.u("elibrary");
      this.rootView = function() {
        var _ref;

        return _ref = _this.hash(), __indexOf.call(root_routes, _ref) >= 0;
      };
      this.route = function(pattern) {
        return _this.hash().match(new RegExp(pattern));
      };
      this.sectionsActive = ko.observable(false);
      this.toggleSections = function() {
        return _this.sectionsActive(!_this.sectionsActive());
      };
      this.enableSections = function() {
        return _this.sectionsActive(true);
      };
      this.disableSections = function() {
        return _this.sectionsActive(false);
      };
      this.foreach_by = function(list, count) {
        var i, local, result;

        result = [];
        local = [];
        i = 0;
        list.forEach(function(x) {
          ++i;
          local.push(x);
          if (i % count === 0) {
            result.push(local);
            return local = [];
          }
        });
        if (local.length) {
          result.push(local);
        }
        return result;
      };
      this.sectionFilter = ko.observable({});
      this.authorHref = function(index) {
        return "#!/authors/" + (index());
      };
    }

    return ViewModel;

  })();

  ko.bindingHandlers.i18n = {
    init: function(element, valueAccessor) {
      var changeValue, value;

      value = window.model.u(valueAccessor());
      changeValue = function(value) {
        return $(element).text(value);
      };
      changeValue(value());
      return value.subscribe(changeValue);
    }
  };

  ko.bindingHandlers["do"] = {
    init: function(element, valueAccessor) {
      var todo;

      todo = valueAccessor();
      return todo();
    }
  };

  ko.bindingHandlers.buttonFilter = {
    init: function(element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
      var $element, binded, innerBindingContext, options, target, what, _i, _len, _ref;

      $element = $(element);
      options = valueAccessor();
      target = options.target();
      _ref = options.data;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        what = _ref[_i];
        if (!target[what]) {
          target[what] = options.all;
        }
      }
      options.target(target);
      binded = false;
      innerBindingContext = bindingContext.extend({
        toggle: function(what) {
          return function() {
            target = options.target();
            target[what] = !target[what];
            return options.target(target);
          };
        },
        active: function(what) {
          return ko.computed(function() {
            target = options.target();
            if (target[what]) {
              return "btn active";
            }
            return "btn";
          });
        }
      });
      ko.applyBindingsToDescendants(innerBindingContext, element);
      binded = true;
      return {
        controlsDescendantBindings: true
      };
    }
  };

  ko.virtualElements.allowedBindings.route = true;

  ko.bindingHandlers.route = {
    init: function(element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
      var conditionAccessor, falsy, hashchange, paramObservables, params, regex, truthy;

      console.log("init called");
      truthy = function() {
        return function() {
          return true;
        };
      };
      falsy = function() {
        return function() {
          return false;
        };
      };
      regex = valueAccessor();
      params = regex.match(/:[a-z_]+/g);
      params = params || [];
      regex = regex.replace(/:[a-z_]+/g, "(.+)");
      paramObservables = {
        matches: ko.observable(false)
      };
      params.forEach(function(param) {
        return paramObservables[param.slice(1)] = ko.observable("");
      });
      bindingContext = bindingContext.extend(paramObservables);
      ko.applyBindingsToDescendants(bindingContext, element);
      conditionAccessor = function() {
        console.log("" + (window.model.hash()), "" + regex);
        console.log("checking: " + (window.model.hash().match(new RegExp(regex))));
        if (window.model.hash().match(new RegExp(regex))) {
          return true;
        }
        return false;
      };
      hashchange = function(hash) {
        var match, to_extend;

        console.log("changed");
        match = hash.match(new RegExp(regex));
        if (match) {
          to_extend = {};
          params.forEach(function(param, index) {
            console.log(param);
            if (match[index + 1]) {
              return paramObservables[param.slice(1)](match[index + 1]);
            } else {
              return paramObservables[param.slice(1)]("");
            }
          });
          paramObservables.matches(true);
        } else {
          paramObservables.matches(false);
        }
        return console.log(bindingContext);
      };
      window.model.hash.subscribe(hashchange);
      hashchange(window.location.hash);
      return {
        controlsDescendantBindings: true
      };
    }
  };

  ko.applyBindings(new ViewModel);

  $("body").css({
    display: "inherit"
  });

}).call(this);
