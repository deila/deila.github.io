// Generated by CoffeeScript 1.6.2
(function() {
  var MenuItem, ViewModel,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  window.root_routes = ["", "#", "#!", "#!/"];

  MenuItem = (function() {
    function MenuItem(title, route) {
      var _this = this;

      this.title = title;
      this.route = route;
      this.title = window.model.u(this.title);
      this.active = ko.computed(function() {
        var hash, _ref;

        hash = window.model.hash();
        if (hash === _this.route) {
          return "active";
        }
        if (__indexOf.call(root_routes, hash) >= 0 && (_ref = _this.route, __indexOf.call(root_routes, _ref) >= 0)) {
          return "active";
        }
        return "";
      });
    }

    return MenuItem;

  })();

  ViewModel = (function() {
    function ViewModel() {
      var _this = this;

      window.model = this;
      this.hash = ko.observable(window.location.hash);
      $(window).on("hashchange", function() {
        return _this.hash(window.location.hash);
      });
      this.languages = languages;
      this.language = ko.observable("ru");
      this.u = function(to_translate) {
        return ko.computed(function() {
          if (!translations[_this.language()][to_translate]) {
            console.log("[warning] no translation: " + to_translate);
            return to_translate;
          }
          return translations[_this.language()][to_translate];
        });
      };
      this.navigation = ko.observable({
        menu: ko.observableArray([new MenuItem("home", "#!/"), new MenuItem("authors", "#!/authors")]),
        right_menu: ko.observableArray([])
      });
      this.title = this.u("elibrary");
      this.rootView = function() {
        var _ref;

        return _ref = _this.hash(), __indexOf.call(root_routes, _ref) >= 0;
      };
      this.route = function(pattern) {
        return _this.hash().match(new RegExp(pattern));
      };
      this.sectionsActive = ko.observable(false);
      this.toggleSections = function() {
        return _this.sectionsActive(!_this.sectionsActive());
      };
      this.enableSections = function() {
        return _this.sectionsActive(true);
      };
      this.disableSections = function() {
        return _this.sectionsActive(false);
      };
      this.foreach_by = function(list, count) {
        var i, local, result;

        result = [];
        local = [];
        i = 0;
        list.forEach(function(x) {
          ++i;
          local.push(x);
          if (i % count === 0) {
            result.push(local);
            return local = [];
          }
        });
        if (local.length) {
          result.push(local);
        }
        return result;
      };
      this.searchString = ko.observable("");
      this.sectionFilter = ko.observable({});
      this.authorsFiltered = ko.computed(function() {
        _this.hash(window.location.hash);
        return data.authors.filter_by("name", _this.sectionFilter, {
          'author.sections.in': 1,
          'ko.computed.truekeys': 1
        })().filter_by("name", _this.searchString, {
          'regex': 1,
          'ko.computed': 1
        })();
      });
      this.booksFiltered = ko.computed(function() {
        _this.hash(window.location.hash);
        return data.books.filter_by("section", _this.sectionFilter, {
          'book.in': 1,
          'ko.computed.truekeys': 1
        })().filter_by("title", _this.searchString, {
          'regex': 1,
          'ko.computed': 1
        })();
      });
      this.authorHref = function(index) {
        return "#!/authors/" + index;
      };
      this.authorNext = function(index) {
        return ko.computed(function() {
          var found;

          found = index();
          _this.authorsFiltered().forEach(function(x, i) {
            if (("" + x.id) === ("" + (index()))) {
              found = i;
              found = parseInt(found) + 1;
              return found %= _this.authorsFiltered().length;
            }
          });
          return _this.authorHref(_this.authorsFiltered()[found].id);
        });
      };
      this.authorPrev = function(index) {
        return ko.computed(function() {
          var found;

          found = index();
          _this.authorsFiltered().forEach(function(x, i) {
            if (("" + x.id) === ("" + (index()))) {
              found = i;
              found = parseInt(found) - 1;
              found += _this.authorsFiltered().length;
              return found %= _this.authorsFiltered().length;
            }
          });
          return _this.authorHref(_this.authorsFiltered()[found].id);
        });
      };
      this.author_active = ko.observable(null);
      this.authorActiveComputed = {};
      this.authorActive = function(index) {
        var res;

        if (_this.authorActiveComputed[index]) {
          return _this.authorActiveComputed[index];
        }
        res = ko.computed(function() {
          var x;

          x = _this.hash();
          if (("" + (_this.author_active())) === ("" + index)) {
            return "active";
          }
          return "";
        });
        _this.authorActiveComputed[index] = res;
        return res;
      };
      this.authorActivate = function(index) {
        return function() {
          if (!index) {
            return _this.author_active(null);
          }
          return _this.author_active(index);
        };
      };
      this.authorHashByName = function(author) {
        var found, _i, _len, _ref;

        _ref = data.authors.filter_by("name", author);
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          found = _ref[_i];
          return _this.authorHref(found.id);
        }
        return "#!/404";
      };
      this.book_hash = function(id) {
        return "#!/books/" + id;
      };
      this.range = function(a, b) {
        var _i, _results;

        return (function() {
          _results = [];
          for (var _i = a; a <= b ? _i < b : _i > b; a <= b ? _i++ : _i--){ _results.push(_i); }
          return _results;
        }).apply(this);
      };
      this.lorem = function() {
        var i, res, s, _i, _len, _ref;

        s = "<p>Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim eniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.</p>";
        res = [];
        _ref = _this.range(0, 30);
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          i = _ref[_i];
          res.push(s);
        }
        return res.join("");
      };
      this.scrollToTop = function() {
        return setTimeout(function() {
          return $("html, body").animate({
            scrollTop: $("h3").offset().top - 20
          });
        }, 1);
      };
    }

    return ViewModel;

  })();

  ko.bindingHandlers.i18n = {
    init: function(element, valueAccessor) {
      var changeValue, value;

      value = window.model.u(valueAccessor());
      changeValue = function(value) {
        return $(element).text(value);
      };
      changeValue(value());
      return value.subscribe(changeValue);
    }
  };

  ko.bindingHandlers.i18nx = {
    init: function(element, valueAccessor) {
      var changeValue, k, v, value, _ref, _results;

      _ref = valueAccessor().attr;
      _results = [];
      for (k in _ref) {
        v = _ref[k];
        value = window.model.u(v);
        changeValue = function(value) {
          return $(element).attr(k, value);
        };
        changeValue(value());
        _results.push(value.subscribe(changeValue));
      }
      return _results;
    }
  };

  ko.bindingHandlers["do"] = {
    init: function(element, valueAccessor) {
      var todo;

      todo = valueAccessor();
      return todo();
    }
  };

  ko.bindingHandlers.buttonFilter = {
    init: function(element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
      var $element, binded, innerBindingContext, options, target, what, _i, _len, _ref;

      $element = $(element);
      options = valueAccessor();
      target = options.target();
      _ref = options.data;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        what = _ref[_i];
        if (!target[what]) {
          target[what] = options.all;
        }
      }
      options.target(target);
      binded = false;
      innerBindingContext = bindingContext.extend({
        toggle: function(what) {
          return function() {
            target = options.target();
            target[what] = !target[what];
            return options.target(target);
          };
        },
        active: function(what) {
          return ko.computed(function() {
            target = options.target();
            if (target[what]) {
              return "btn active";
            }
            return "btn";
          });
        },
        toggleAll: function() {
          var all, k, v;

          all = true;
          target = options.target();
          for (k in target) {
            v = target[k];
            if (v) {
              all = false;
            }
          }
          for (k in target) {
            v = target[k];
            target[k] = all;
          }
          return options.target(target);
        },
        anyActive: function() {
          var k, v;

          target = options.target();
          for (k in target) {
            v = target[k];
            if (v) {
              return "btn active";
            }
          }
          return "btn";
        }
      });
      ko.applyBindingsToDescendants(innerBindingContext, element);
      binded = true;
      return {
        controlsDescendantBindings: true
      };
    }
  };

  ko.virtualElements.allowedBindings.route = true;

  ko.bindingHandlers.route = {
    init: function(element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
      var childBindingContext, conditionAccessor, falsy, hashchange, paramObservables, params, regex, truthy;

      truthy = function() {
        return function() {
          return true;
        };
      };
      falsy = function() {
        return function() {
          return false;
        };
      };
      regex = valueAccessor();
      params = regex.match(/:[a-z_]+/g);
      params = params || [];
      regex = regex.replace(/:[a-z_]+/g, "(.+)");
      paramObservables = {
        matches: ko.observable(false)
      };
      params.forEach(function(param) {
        return paramObservables[param.slice(1)] = ko.observable("");
      });
      childBindingContext = bindingContext.createChildContext(viewModel);
      ko.utils.extend(childBindingContext, paramObservables);
      ko.applyBindingsToDescendants(childBindingContext, element);
      conditionAccessor = function() {
        if (window.model.hash().match(new RegExp(regex))) {
          return true;
        }
        return false;
      };
      hashchange = function(hash) {
        var match, to_extend;

        match = hash.match(new RegExp(regex));
        if (match) {
          to_extend = {};
          params.forEach(function(param, index) {
            if (match[index + 1]) {
              return paramObservables[param.slice(1)](match[index + 1]);
            } else {
              return paramObservables[param.slice(1)]("");
            }
          });
          return paramObservables.matches(true);
        } else {
          return paramObservables.matches(false);
        }
      };
      window.model.hash.subscribe(hashchange);
      hashchange(window.location.hash);
      return {
        controlsDescendantBindings: true
      };
    }
  };

  ko.applyBindings(new ViewModel);

  $("body").css({
    display: "inherit"
  });

}).call(this);
